# This is a GitHub Actions workflow that builds and publishes a Docker image.
# It triggers on every push to the 'main' branch.

name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-publish:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Define permissions for the GITHUB_TOKEN so the workflow can push to the container registry and create a release.
    permissions:
      contents: write # Required to create/update a release
      packages: write # Required to upload container images

    steps:
      # 1. Checkout the repository code
      # This action checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Log in to the GitHub Container Registry
      # This action logs in the Docker client to a container registry.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # github.actor is the username of the user that triggered the workflow
          username: ${{ github.actor }}
          # GITHUB_TOKEN is a special token provided by Actions, used to authenticate in your repository.
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Extract metadata for the Docker image
      # This action extracts metadata (tags, labels) for Docker and makes them available as outputs.
      # We are setting a single tag: 'latest'.
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=true

      # 4. Build and push the Docker image
      # This action builds the Docker image from the Dockerfile in the root and pushes it to the registry.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Use the tags and labels generated by the 'meta' step.
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 5. Create or update the 'latest' release
      # This action creates a GitHub release. If a release with the tag 'latest' already exists,
      # it will be updated. This ensures there is always a 'latest' release pointing to the
      # most recent build from the main branch.
      - name: Create or update latest release
        uses: ncipollo/release-action@v1
        with:
          # The Git tag to create or update.
          tag: "latest"
          # The name of the release.
          name: "Latest Release"
          # A description for the release.
          body: "This release contains the latest image pushed from the main branch. Image: `ghcr.io/${{ github.repository }}:latest`"
          # This allows the action to update an existing release.
          allowUpdates: true
          # The GITHUB_TOKEN is used to authenticate to the GitHub API.
          token: ${{ secrets.GITHUB_TOKEN }}

